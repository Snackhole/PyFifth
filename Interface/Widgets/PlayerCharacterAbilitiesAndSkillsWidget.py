from PyQt5 import QtCore
from PyQt5.QtWidgets import QFrame, QGridLayout, QLabel, QLineEdit, QSizePolicy, QTextEdit

from Interface.Widgets.EditButton import EditButton
from Interface.Widgets.RollButton import RollButton


class PlayerCharacterAbilitiesAndSkillsWidget(QFrame):
    def __init__(self, CharacterWindow):
        # Initialize Frame
        super().__init__()

        # Store Parameters
        self.CharacterWindow = CharacterWindow

        # Styles
        self.SectionLabelStyle = "QLabel {font-size: 10pt; font-weight: bold;}"
        self.AbilityScoreStyle = "QLineEdit {font-size: 16pt;}"

        # Header Label Margin
        self.HeaderLabelMargin = 5

        # Inputs Size Policy
        self.InputsSizePolicy = QSizePolicy(QSizePolicy.Minimum, QSizePolicy.Minimum)

        # Abilities and Saving Throws
        self.CreateAbilitiesAndSavingThrowsTable()

        # Skills
        self.CreateSkillsTable()

        # Proficiencies
        self.CreateProficiencyInputs()

        # Create and Set Layout
        self.CreateAndSetLayout()

    def CreateAbilitiesAndSavingThrowsTable(self):
        # Header
        self.AbilitiesAndSavingThrowsLabel = QLabel("Abilities and Saving Throws")
        self.AbilitiesAndSavingThrowsLabel.setStyleSheet(self.SectionLabelStyle)
        self.AbilitiesAndSavingThrowsLabel.setAlignment(QtCore.Qt.AlignCenter)
        self.AbilitiesAndSavingThrowsLabel.setMargin(self.HeaderLabelMargin)

        self.AbilitiesAndSavingThrowsEditButton = EditButton(lambda: self.EditAbilityScores(), Tooltip="Edit Ability Scores and Saving Throws")
        self.AbilitiesAndSavingThrowsEditButton.setSizePolicy(self.InputsSizePolicy)

        self.AbilitiesAndSavingThrowsHeaderAbilityLabel = QLabel("Ability")
        self.AbilitiesAndSavingThrowsHeaderAbilityLabel.setAlignment(QtCore.Qt.AlignCenter)
        self.AbilitiesAndSavingThrowsHeaderAbilityLabel.setFrameStyle(QLabel.Panel | QLabel.Plain)
        self.AbilitiesAndSavingThrowsHeaderAbilityLabel.setMargin(5)
        self.AbilitiesAndSavingThrowsHeaderTotalLabel = QLabel("Total")
        self.AbilitiesAndSavingThrowsHeaderTotalLabel.setAlignment(QtCore.Qt.AlignCenter)
        self.AbilitiesAndSavingThrowsHeaderTotalLabel.setFrameStyle(QLabel.Panel | QLabel.Plain)
        self.AbilitiesAndSavingThrowsHeaderTotalLabel.setMargin(5)
        self.AbilitiesAndSavingThrowsHeaderModifierLabel = QLabel("Modifier")
        self.AbilitiesAndSavingThrowsHeaderModifierLabel.setAlignment(QtCore.Qt.AlignCenter)
        self.AbilitiesAndSavingThrowsHeaderModifierLabel.setFrameStyle(QLabel.Panel | QLabel.Plain)
        self.AbilitiesAndSavingThrowsHeaderModifierLabel.setMargin(5)
        self.AbilitiesAndSavingThrowsHeaderSavingThrowLabel = QLabel("Saving Throw")
        self.AbilitiesAndSavingThrowsHeaderSavingThrowLabel.setAlignment(QtCore.Qt.AlignCenter)
        self.AbilitiesAndSavingThrowsHeaderSavingThrowLabel.setFrameStyle(QLabel.Panel | QLabel.Plain)
        self.AbilitiesAndSavingThrowsHeaderSavingThrowLabel.setMargin(5)

        # Strength
        self.StrengthLabel = QLabel("Strength")
        self.StrengthLabel.setAlignment(QtCore.Qt.AlignCenter)
        self.StrengthTotalLineEdit = QLineEdit()
        self.StrengthTotalLineEdit.setStyleSheet(self.AbilityScoreStyle)
        self.StrengthTotalLineEdit.setMinimumWidth(100)
        self.StrengthTotalLineEdit.setSizePolicy(self.InputsSizePolicy)
        self.StrengthTotalLineEdit.setAlignment(QtCore.Qt.AlignCenter)
        self.StrengthTotalLineEdit.setReadOnly(True)
        self.StrengthModifierLineEdit = QLineEdit()
        self.StrengthModifierLineEdit.setStyleSheet(self.AbilityScoreStyle)
        self.StrengthModifierLineEdit.setMinimumWidth(100)
        self.StrengthModifierLineEdit.setSizePolicy(self.InputsSizePolicy)
        self.StrengthModifierLineEdit.setAlignment(QtCore.Qt.AlignCenter)
        self.StrengthModifierLineEdit.setReadOnly(True)
        self.StrengthModifierRollButton = RollButton(lambda: self.Roll("Strength Ability Check:\n", self.CharacterWindow.PlayerCharacter.Stats["Ability Scores"]["Strength Stat Modifier"]), Tooltip="Roll Strength Ability Check")
        self.StrengthModifierRollButton.setSizePolicy(self.InputsSizePolicy)
        self.StrengthSavingThrowLineEdit = QLineEdit()
        self.StrengthSavingThrowLineEdit.setStyleSheet(self.AbilityScoreStyle)
        self.StrengthSavingThrowLineEdit.setMinimumWidth(100)
        self.StrengthSavingThrowLineEdit.setSizePolicy(self.InputsSizePolicy)
        self.StrengthSavingThrowLineEdit.setAlignment(QtCore.Qt.AlignCenter)
        self.StrengthSavingThrowLineEdit.setReadOnly(True)
        self.StrengthSavingThrowRollButton = RollButton(lambda: self.Roll("Strength Saving Throw:\n", self.CharacterWindow.PlayerCharacter.Stats["Ability Scores"]["Strength Save Stat Modifier"]), Tooltip="Roll Strength Saving Throw")
        self.StrengthSavingThrowRollButton.setSizePolicy(self.InputsSizePolicy)

        # Dexterity
        self.DexterityLabel = QLabel("Dexterity")
        self.DexterityLabel.setAlignment(QtCore.Qt.AlignCenter)
        self.DexterityTotalLineEdit = QLineEdit()
        self.DexterityTotalLineEdit.setStyleSheet(self.AbilityScoreStyle)
        self.DexterityTotalLineEdit.setMinimumWidth(100)
        self.DexterityTotalLineEdit.setSizePolicy(self.InputsSizePolicy)
        self.DexterityTotalLineEdit.setAlignment(QtCore.Qt.AlignCenter)
        self.DexterityTotalLineEdit.setReadOnly(True)
        self.DexterityModifierLineEdit = QLineEdit()
        self.DexterityModifierLineEdit.setStyleSheet(self.AbilityScoreStyle)
        self.DexterityModifierLineEdit.setMinimumWidth(100)
        self.DexterityModifierLineEdit.setSizePolicy(self.InputsSizePolicy)
        self.DexterityModifierLineEdit.setAlignment(QtCore.Qt.AlignCenter)
        self.DexterityModifierLineEdit.setReadOnly(True)
        self.DexterityModifierRollButton = RollButton(lambda: self.Roll("Dexterity Ability Check:\n", self.CharacterWindow.PlayerCharacter.Stats["Ability Scores"]["Dexterity Stat Modifier"]), Tooltip="Roll Dexterity Ability Check")
        self.DexterityModifierRollButton.setSizePolicy(self.InputsSizePolicy)
        self.DexteritySavingThrowLineEdit = QLineEdit()
        self.DexteritySavingThrowLineEdit.setStyleSheet(self.AbilityScoreStyle)
        self.DexteritySavingThrowLineEdit.setMinimumWidth(100)
        self.DexteritySavingThrowLineEdit.setSizePolicy(self.InputsSizePolicy)
        self.DexteritySavingThrowLineEdit.setAlignment(QtCore.Qt.AlignCenter)
        self.DexteritySavingThrowLineEdit.setReadOnly(True)
        self.DexteritySavingThrowRollButton = RollButton(lambda: self.Roll("Dexterity Saving Throw:\n", self.CharacterWindow.PlayerCharacter.Stats["Ability Scores"]["Dexterity Save Stat Modifier"]), Tooltip="Roll Dexterity Saving Throw")
        self.DexteritySavingThrowRollButton.setSizePolicy(self.InputsSizePolicy)

        # Constitution
        self.ConstitutionLabel = QLabel("Constitution")
        self.ConstitutionLabel.setAlignment(QtCore.Qt.AlignCenter)
        self.ConstitutionTotalLineEdit = QLineEdit()
        self.ConstitutionTotalLineEdit.setStyleSheet(self.AbilityScoreStyle)
        self.ConstitutionTotalLineEdit.setMinimumWidth(100)
        self.ConstitutionTotalLineEdit.setSizePolicy(self.InputsSizePolicy)
        self.ConstitutionTotalLineEdit.setAlignment(QtCore.Qt.AlignCenter)
        self.ConstitutionTotalLineEdit.setReadOnly(True)
        self.ConstitutionModifierLineEdit = QLineEdit()
        self.ConstitutionModifierLineEdit.setStyleSheet(self.AbilityScoreStyle)
        self.ConstitutionModifierLineEdit.setMinimumWidth(100)
        self.ConstitutionModifierLineEdit.setSizePolicy(self.InputsSizePolicy)
        self.ConstitutionModifierLineEdit.setAlignment(QtCore.Qt.AlignCenter)
        self.ConstitutionModifierLineEdit.setReadOnly(True)
        self.ConstitutionModifierRollButton = RollButton(lambda: self.Roll("Constitution Ability Check:\n", self.CharacterWindow.PlayerCharacter.Stats["Ability Scores"]["Constitution Stat Modifier"]), Tooltip="Roll Constitution Ability Check")
        self.ConstitutionModifierRollButton.setSizePolicy(self.InputsSizePolicy)
        self.ConstitutionSavingThrowLineEdit = QLineEdit()
        self.ConstitutionSavingThrowLineEdit.setStyleSheet(self.AbilityScoreStyle)
        self.ConstitutionSavingThrowLineEdit.setMinimumWidth(100)
        self.ConstitutionSavingThrowLineEdit.setSizePolicy(self.InputsSizePolicy)
        self.ConstitutionSavingThrowLineEdit.setAlignment(QtCore.Qt.AlignCenter)
        self.ConstitutionSavingThrowLineEdit.setReadOnly(True)
        self.ConstitutionSavingThrowRollButton = RollButton(lambda: self.Roll("Constitution Saving Throw:\n", self.CharacterWindow.PlayerCharacter.Stats["Ability Scores"]["Constitution Save Stat Modifier"]), Tooltip="Roll Constitution Saving Throw")
        self.ConstitutionSavingThrowRollButton.setSizePolicy(self.InputsSizePolicy)

        # Intelligence
        self.IntelligenceLabel = QLabel("Intelligence")
        self.IntelligenceLabel.setAlignment(QtCore.Qt.AlignCenter)
        self.IntelligenceTotalLineEdit = QLineEdit()
        self.IntelligenceTotalLineEdit.setStyleSheet(self.AbilityScoreStyle)
        self.IntelligenceTotalLineEdit.setMinimumWidth(100)
        self.IntelligenceTotalLineEdit.setSizePolicy(self.InputsSizePolicy)
        self.IntelligenceTotalLineEdit.setAlignment(QtCore.Qt.AlignCenter)
        self.IntelligenceTotalLineEdit.setReadOnly(True)
        self.IntelligenceModifierLineEdit = QLineEdit()
        self.IntelligenceModifierLineEdit.setStyleSheet(self.AbilityScoreStyle)
        self.IntelligenceModifierLineEdit.setMinimumWidth(100)
        self.IntelligenceModifierLineEdit.setSizePolicy(self.InputsSizePolicy)
        self.IntelligenceModifierLineEdit.setAlignment(QtCore.Qt.AlignCenter)
        self.IntelligenceModifierLineEdit.setReadOnly(True)
        self.IntelligenceModifierRollButton = RollButton(lambda: self.Roll("Intelligence Ability Check:\n", self.CharacterWindow.PlayerCharacter.Stats["Ability Scores"]["Intelligence Stat Modifier"]), Tooltip="Roll Intelligence Ability Check")
        self.IntelligenceModifierRollButton.setSizePolicy(self.InputsSizePolicy)
        self.IntelligenceSavingThrowLineEdit = QLineEdit()
        self.IntelligenceSavingThrowLineEdit.setStyleSheet(self.AbilityScoreStyle)
        self.IntelligenceSavingThrowLineEdit.setMinimumWidth(100)
        self.IntelligenceSavingThrowLineEdit.setSizePolicy(self.InputsSizePolicy)
        self.IntelligenceSavingThrowLineEdit.setAlignment(QtCore.Qt.AlignCenter)
        self.IntelligenceSavingThrowLineEdit.setReadOnly(True)
        self.IntelligenceSavingThrowRollButton = RollButton(lambda: self.Roll("Intelligence Saving Throw:\n", self.CharacterWindow.PlayerCharacter.Stats["Ability Scores"]["Intelligence Save Stat Modifier"]), Tooltip="Roll Intelligence Saving Throw")
        self.IntelligenceSavingThrowRollButton.setSizePolicy(self.InputsSizePolicy)

        # Wisdom
        self.WisdomLabel = QLabel("Wisdom")
        self.WisdomLabel.setAlignment(QtCore.Qt.AlignCenter)
        self.WisdomTotalLineEdit = QLineEdit()
        self.WisdomTotalLineEdit.setStyleSheet(self.AbilityScoreStyle)
        self.WisdomTotalLineEdit.setMinimumWidth(100)
        self.WisdomTotalLineEdit.setSizePolicy(self.InputsSizePolicy)
        self.WisdomTotalLineEdit.setAlignment(QtCore.Qt.AlignCenter)
        self.WisdomTotalLineEdit.setReadOnly(True)
        self.WisdomModifierLineEdit = QLineEdit()
        self.WisdomModifierLineEdit.setStyleSheet(self.AbilityScoreStyle)
        self.WisdomModifierLineEdit.setMinimumWidth(100)
        self.WisdomModifierLineEdit.setSizePolicy(self.InputsSizePolicy)
        self.WisdomModifierLineEdit.setAlignment(QtCore.Qt.AlignCenter)
        self.WisdomModifierLineEdit.setReadOnly(True)
        self.WisdomModifierRollButton = RollButton(lambda: self.Roll("Wisdom Ability Check:\n", self.CharacterWindow.PlayerCharacter.Stats["Ability Scores"]["Wisdom Stat Modifier"]), Tooltip="Roll Wisdom Ability Check")
        self.WisdomModifierRollButton.setSizePolicy(self.InputsSizePolicy)
        self.WisdomSavingThrowLineEdit = QLineEdit()
        self.WisdomSavingThrowLineEdit.setStyleSheet(self.AbilityScoreStyle)
        self.WisdomSavingThrowLineEdit.setMinimumWidth(100)
        self.WisdomSavingThrowLineEdit.setSizePolicy(self.InputsSizePolicy)
        self.WisdomSavingThrowLineEdit.setAlignment(QtCore.Qt.AlignCenter)
        self.WisdomSavingThrowLineEdit.setReadOnly(True)
        self.WisdomSavingThrowRollButton = RollButton(lambda: self.Roll("Wisdom Saving Throw:\n", self.CharacterWindow.PlayerCharacter.Stats["Ability Scores"]["Wisdom Save Stat Modifier"]), Tooltip="Roll Wisdom Saving Throw")
        self.WisdomSavingThrowRollButton.setSizePolicy(self.InputsSizePolicy)

        # Charisma
        self.CharismaLabel = QLabel("Charisma")
        self.CharismaLabel.setAlignment(QtCore.Qt.AlignCenter)
        self.CharismaTotalLineEdit = QLineEdit()
        self.CharismaTotalLineEdit.setStyleSheet(self.AbilityScoreStyle)
        self.CharismaTotalLineEdit.setMinimumWidth(100)
        self.CharismaTotalLineEdit.setSizePolicy(self.InputsSizePolicy)
        self.CharismaTotalLineEdit.setAlignment(QtCore.Qt.AlignCenter)
        self.CharismaTotalLineEdit.setReadOnly(True)
        self.CharismaModifierLineEdit = QLineEdit()
        self.CharismaModifierLineEdit.setStyleSheet(self.AbilityScoreStyle)
        self.CharismaModifierLineEdit.setMinimumWidth(100)
        self.CharismaModifierLineEdit.setSizePolicy(self.InputsSizePolicy)
        self.CharismaModifierLineEdit.setAlignment(QtCore.Qt.AlignCenter)
        self.CharismaModifierLineEdit.setReadOnly(True)
        self.CharismaModifierRollButton = RollButton(lambda: self.Roll("Charisma Ability Check:\n", self.CharacterWindow.PlayerCharacter.Stats["Ability Scores"]["Charisma Stat Modifier"]), Tooltip="Roll Charisma Ability Check")
        self.CharismaModifierRollButton.setSizePolicy(self.InputsSizePolicy)
        self.CharismaSavingThrowLineEdit = QLineEdit()
        self.CharismaSavingThrowLineEdit.setStyleSheet(self.AbilityScoreStyle)
        self.CharismaSavingThrowLineEdit.setMinimumWidth(100)
        self.CharismaSavingThrowLineEdit.setSizePolicy(self.InputsSizePolicy)
        self.CharismaSavingThrowLineEdit.setAlignment(QtCore.Qt.AlignCenter)
        self.CharismaSavingThrowLineEdit.setReadOnly(True)
        self.CharismaSavingThrowRollButton = RollButton(lambda: self.Roll("Charisma Saving Throw:\n", self.CharacterWindow.PlayerCharacter.Stats["Ability Scores"]["Charisma Save Stat Modifier"]), Tooltip="Roll Charisma Saving Throw")
        self.CharismaSavingThrowRollButton.setSizePolicy(self.InputsSizePolicy)

    def CreateSkillsTable(self):
        # Header
        self.SkillsLabel = QLabel("Skills")
        self.SkillsLabel.setStyleSheet(self.SectionLabelStyle)
        self.SkillsLabel.setAlignment(QtCore.Qt.AlignCenter)
        self.SkillsLabel.setMargin(self.HeaderLabelMargin)

        self.SkillsEditButton = EditButton(lambda: self.EditSkills(), Tooltip="Edit Skills")
        self.SkillsEditButton.setSizePolicy(self.InputsSizePolicy)

        self.SkillsHeaderSkillLabel = QLabel("Skill")
        self.SkillsHeaderSkillLabel.setAlignment(QtCore.Qt.AlignCenter)
        self.SkillsHeaderSkillLabel.setFrameStyle(QLabel.Panel | QLabel.Plain)
        self.SkillsHeaderSkillLabel.setMargin(5)
        self.SkillsHeaderModifierLabel = QLabel("Modifier")
        self.SkillsHeaderModifierLabel.setAlignment(QtCore.Qt.AlignCenter)
        self.SkillsHeaderModifierLabel.setFrameStyle(QLabel.Panel | QLabel.Plain)
        self.SkillsHeaderModifierLabel.setMargin(5)

        # Acrobatics (DEX)
        self.AcrobaticsLabel = QLabel("Acrobatics (DEX)")
        self.AcrobaticsLabel.setAlignment(QtCore.Qt.AlignCenter)
        self.AcrobaticsModifierLineEdit = QLineEdit()
        self.AcrobaticsModifierLineEdit.setMinimumWidth(75)
        self.AcrobaticsModifierLineEdit.setSizePolicy(self.InputsSizePolicy)
        self.AcrobaticsModifierLineEdit.setAlignment(QtCore.Qt.AlignCenter)
        self.AcrobaticsModifierLineEdit.setReadOnly(True)
        self.AcrobaticsModifierRollButton = RollButton(lambda: self.Roll("Acrobatics (DEX) Check:\n", self.CharacterWindow.PlayerCharacter.Stats["Skills"]["Acrobatics Stat Modifier"]), Tooltip="Roll Acrobatics (DEX) Check")
        self.AcrobaticsModifierRollButton.setSizePolicy(self.InputsSizePolicy)

        # Animal Handling (WIS)
        self.AnimalHandlingLabel = QLabel("Animal Handling (WIS)")
        self.AnimalHandlingLabel.setAlignment(QtCore.Qt.AlignCenter)
        self.AnimalHandlingModifierLineEdit = QLineEdit()
        self.AnimalHandlingModifierLineEdit.setMinimumWidth(75)
        self.AnimalHandlingModifierLineEdit.setSizePolicy(self.InputsSizePolicy)
        self.AnimalHandlingModifierLineEdit.setAlignment(QtCore.Qt.AlignCenter)
        self.AnimalHandlingModifierLineEdit.setReadOnly(True)
        self.AnimalHandlingModifierRollButton = RollButton(lambda: self.Roll("Animal Handling (WIS) Check:\n", self.CharacterWindow.PlayerCharacter.Stats["Skills"]["Animal Handling Stat Modifier"]), Tooltip="Roll Animal Handling (WIS) Check")
        self.AnimalHandlingModifierRollButton.setSizePolicy(self.InputsSizePolicy)

        # Arcana (INT)
        self.ArcanaLabel = QLabel("Arcana (INT)")
        self.ArcanaLabel.setAlignment(QtCore.Qt.AlignCenter)
        self.ArcanaModifierLineEdit = QLineEdit()
        self.ArcanaModifierLineEdit.setMinimumWidth(75)
        self.ArcanaModifierLineEdit.setSizePolicy(self.InputsSizePolicy)
        self.ArcanaModifierLineEdit.setAlignment(QtCore.Qt.AlignCenter)
        self.ArcanaModifierLineEdit.setReadOnly(True)
        self.ArcanaModifierRollButton = RollButton(lambda: self.Roll("Arcana (INT) Check:\n", self.CharacterWindow.PlayerCharacter.Stats["Skills"]["Arcana Stat Modifier"]), Tooltip="Roll Arcana (INT) Check")
        self.ArcanaModifierRollButton.setSizePolicy(self.InputsSizePolicy)

        # Athletics (STR)
        self.AthleticsLabel = QLabel("Athletics (STR)")
        self.AthleticsLabel.setAlignment(QtCore.Qt.AlignCenter)
        self.AthleticsModifierLineEdit = QLineEdit()
        self.AthleticsModifierLineEdit.setMinimumWidth(75)
        self.AthleticsModifierLineEdit.setSizePolicy(self.InputsSizePolicy)
        self.AthleticsModifierLineEdit.setAlignment(QtCore.Qt.AlignCenter)
        self.AthleticsModifierLineEdit.setReadOnly(True)
        self.AthleticsModifierRollButton = RollButton(lambda: self.Roll("Athletics (STR) Check:\n", self.CharacterWindow.PlayerCharacter.Stats["Skills"]["Athletics Stat Modifier"]), Tooltip="Roll Athletics (STR) Check")
        self.AthleticsModifierRollButton.setSizePolicy(self.InputsSizePolicy)

        # Deception (CHA)
        self.DeceptionLabel = QLabel("Deception (CHA)")
        self.DeceptionLabel.setAlignment(QtCore.Qt.AlignCenter)
        self.DeceptionModifierLineEdit = QLineEdit()
        self.DeceptionModifierLineEdit.setMinimumWidth(75)
        self.DeceptionModifierLineEdit.setSizePolicy(self.InputsSizePolicy)
        self.DeceptionModifierLineEdit.setAlignment(QtCore.Qt.AlignCenter)
        self.DeceptionModifierLineEdit.setReadOnly(True)
        self.DeceptionModifierRollButton = RollButton(lambda: self.Roll("Deception (CHA) Check:\n", self.CharacterWindow.PlayerCharacter.Stats["Skills"]["Deception Stat Modifier"]), Tooltip="Roll Deception (CHA) Check")
        self.DeceptionModifierRollButton.setSizePolicy(self.InputsSizePolicy)

        # History (INT)
        self.HistoryLabel = QLabel("History (INT)")
        self.HistoryLabel.setAlignment(QtCore.Qt.AlignCenter)
        self.HistoryModifierLineEdit = QLineEdit()
        self.HistoryModifierLineEdit.setMinimumWidth(75)
        self.HistoryModifierLineEdit.setSizePolicy(self.InputsSizePolicy)
        self.HistoryModifierLineEdit.setAlignment(QtCore.Qt.AlignCenter)
        self.HistoryModifierLineEdit.setReadOnly(True)
        self.HistoryModifierRollButton = RollButton(lambda: self.Roll("History (INT) Check:\n", self.CharacterWindow.PlayerCharacter.Stats["Skills"]["History Stat Modifier"]), Tooltip="Roll History (INT) Check")
        self.HistoryModifierRollButton.setSizePolicy(self.InputsSizePolicy)

        # Insight (WIS)
        self.InsightLabel = QLabel("Insight (WIS)")
        self.InsightLabel.setAlignment(QtCore.Qt.AlignCenter)
        self.InsightModifierLineEdit = QLineEdit()
        self.InsightModifierLineEdit.setMinimumWidth(75)
        self.InsightModifierLineEdit.setSizePolicy(self.InputsSizePolicy)
        self.InsightModifierLineEdit.setAlignment(QtCore.Qt.AlignCenter)
        self.InsightModifierLineEdit.setReadOnly(True)
        self.InsightModifierRollButton = RollButton(lambda: self.Roll("Insight (WIS) Check:\n", self.CharacterWindow.PlayerCharacter.Stats["Skills"]["Insight Stat Modifier"]), Tooltip="Roll Insight (WIS) Check")
        self.InsightModifierRollButton.setSizePolicy(self.InputsSizePolicy)

        # Intimidation (CHA)
        self.IntimidationLabel = QLabel("Intimidation (CHA)")
        self.IntimidationLabel.setAlignment(QtCore.Qt.AlignCenter)
        self.IntimidationModifierLineEdit = QLineEdit()
        self.IntimidationModifierLineEdit.setMinimumWidth(75)
        self.IntimidationModifierLineEdit.setSizePolicy(self.InputsSizePolicy)
        self.IntimidationModifierLineEdit.setAlignment(QtCore.Qt.AlignCenter)
        self.IntimidationModifierLineEdit.setReadOnly(True)
        self.IntimidationModifierRollButton = RollButton(lambda: self.Roll("Intimidation (CHA) Check:\n", self.CharacterWindow.PlayerCharacter.Stats["Skills"]["Intimidation Stat Modifier"]), Tooltip="Roll Intimidation (CHA) Check")
        self.IntimidationModifierRollButton.setSizePolicy(self.InputsSizePolicy)

        # Investigation (INT)
        self.InvestigationLabel = QLabel("Investigation (INT)")
        self.InvestigationLabel.setAlignment(QtCore.Qt.AlignCenter)
        self.InvestigationModifierLineEdit = QLineEdit()
        self.InvestigationModifierLineEdit.setMinimumWidth(75)
        self.InvestigationModifierLineEdit.setSizePolicy(self.InputsSizePolicy)
        self.InvestigationModifierLineEdit.setAlignment(QtCore.Qt.AlignCenter)
        self.InvestigationModifierLineEdit.setReadOnly(True)
        self.InvestigationModifierRollButton = RollButton(lambda: self.Roll("Investigation (INT) Check:\n", self.CharacterWindow.PlayerCharacter.Stats["Skills"]["Investigation Stat Modifier"]), Tooltip="Roll Investigation (INT) Check")
        self.InvestigationModifierRollButton.setSizePolicy(self.InputsSizePolicy)

        # Medicine (WIS)
        self.MedicineLabel = QLabel("Medicine (WIS)")
        self.MedicineLabel.setAlignment(QtCore.Qt.AlignCenter)
        self.MedicineModifierLineEdit = QLineEdit()
        self.MedicineModifierLineEdit.setMinimumWidth(75)
        self.MedicineModifierLineEdit.setSizePolicy(self.InputsSizePolicy)
        self.MedicineModifierLineEdit.setAlignment(QtCore.Qt.AlignCenter)
        self.MedicineModifierLineEdit.setReadOnly(True)
        self.MedicineModifierRollButton = RollButton(lambda: self.Roll("Medicine (WIS) Check:\n", self.CharacterWindow.PlayerCharacter.Stats["Skills"]["Medicine Stat Modifier"]), Tooltip="Roll Medicine (WIS) Check")
        self.MedicineModifierRollButton.setSizePolicy(self.InputsSizePolicy)

        # Nature (INT)
        self.NatureLabel = QLabel("Nature (INT)")
        self.NatureLabel.setAlignment(QtCore.Qt.AlignCenter)
        self.NatureModifierLineEdit = QLineEdit()
        self.NatureModifierLineEdit.setMinimumWidth(75)
        self.NatureModifierLineEdit.setSizePolicy(self.InputsSizePolicy)
        self.NatureModifierLineEdit.setAlignment(QtCore.Qt.AlignCenter)
        self.NatureModifierLineEdit.setReadOnly(True)
        self.NatureModifierRollButton = RollButton(lambda: self.Roll("Nature (INT) Check:\n", self.CharacterWindow.PlayerCharacter.Stats["Skills"]["Nature Stat Modifier"]), Tooltip="Roll Nature (INT) Check")
        self.NatureModifierRollButton.setSizePolicy(self.InputsSizePolicy)

        # Perception (WIS)
        self.PerceptionLabel = QLabel("Perception (WIS)")
        self.PerceptionLabel.setAlignment(QtCore.Qt.AlignCenter)
        self.PerceptionModifierLineEdit = QLineEdit()
        self.PerceptionModifierLineEdit.setMinimumWidth(75)
        self.PerceptionModifierLineEdit.setSizePolicy(self.InputsSizePolicy)
        self.PerceptionModifierLineEdit.setAlignment(QtCore.Qt.AlignCenter)
        self.PerceptionModifierLineEdit.setReadOnly(True)
        self.PerceptionModifierRollButton = RollButton(lambda: self.Roll("Perception (WIS) Check:\n", self.CharacterWindow.PlayerCharacter.Stats["Skills"]["Perception Stat Modifier"]), Tooltip="Roll Perception (WIS) Check")
        self.PerceptionModifierRollButton.setSizePolicy(self.InputsSizePolicy)

        # Performance (CHA)
        self.PerformanceLabel = QLabel("Performance (CHA)")
        self.PerformanceLabel.setAlignment(QtCore.Qt.AlignCenter)
        self.PerformanceModifierLineEdit = QLineEdit()
        self.PerformanceModifierLineEdit.setMinimumWidth(75)
        self.PerformanceModifierLineEdit.setSizePolicy(self.InputsSizePolicy)
        self.PerformanceModifierLineEdit.setAlignment(QtCore.Qt.AlignCenter)
        self.PerformanceModifierLineEdit.setReadOnly(True)
        self.PerformanceModifierRollButton = RollButton(lambda: self.Roll("Performance (CHA) Check:\n", self.CharacterWindow.PlayerCharacter.Stats["Skills"]["Performance Stat Modifier"]), Tooltip="Roll Performance (CHA) Check")
        self.PerformanceModifierRollButton.setSizePolicy(self.InputsSizePolicy)

        # Persuasion (CHA)
        self.PersuasionLabel = QLabel("Persuasion (CHA)")
        self.PersuasionLabel.setAlignment(QtCore.Qt.AlignCenter)
        self.PersuasionModifierLineEdit = QLineEdit()
        self.PersuasionModifierLineEdit.setMinimumWidth(75)
        self.PersuasionModifierLineEdit.setSizePolicy(self.InputsSizePolicy)
        self.PersuasionModifierLineEdit.setAlignment(QtCore.Qt.AlignCenter)
        self.PersuasionModifierLineEdit.setReadOnly(True)
        self.PersuasionModifierRollButton = RollButton(lambda: self.Roll("Persuasion (CHA) Check:\n", self.CharacterWindow.PlayerCharacter.Stats["Skills"]["Persuasion Stat Modifier"]), Tooltip="Roll Persuasion (CHA) Check")
        self.PersuasionModifierRollButton.setSizePolicy(self.InputsSizePolicy)

        # Religion (INT)
        self.ReligionLabel = QLabel("Religion (INT)")
        self.ReligionLabel.setAlignment(QtCore.Qt.AlignCenter)
        self.ReligionModifierLineEdit = QLineEdit()
        self.ReligionModifierLineEdit.setMinimumWidth(75)
        self.ReligionModifierLineEdit.setSizePolicy(self.InputsSizePolicy)
        self.ReligionModifierLineEdit.setAlignment(QtCore.Qt.AlignCenter)
        self.ReligionModifierLineEdit.setReadOnly(True)
        self.ReligionModifierRollButton = RollButton(lambda: self.Roll("Religion (INT) Check:\n", self.CharacterWindow.PlayerCharacter.Stats["Skills"]["Religion Stat Modifier"]), Tooltip="Roll Religion (INT) Check")
        self.ReligionModifierRollButton.setSizePolicy(self.InputsSizePolicy)

        # Sleight of Hand (DEX)
        self.SleightOfHandLabel = QLabel("Sleight of Hand (DEX)")
        self.SleightOfHandLabel.setAlignment(QtCore.Qt.AlignCenter)
        self.SleightOfHandModifierLineEdit = QLineEdit()
        self.SleightOfHandModifierLineEdit.setMinimumWidth(75)
        self.SleightOfHandModifierLineEdit.setSizePolicy(self.InputsSizePolicy)
        self.SleightOfHandModifierLineEdit.setAlignment(QtCore.Qt.AlignCenter)
        self.SleightOfHandModifierLineEdit.setReadOnly(True)
        self.SleightOfHandModifierRollButton = RollButton(lambda: self.Roll("Sleight of Hand (DEX) Check:\n", self.CharacterWindow.PlayerCharacter.Stats["Skills"]["Sleight of Hand Stat Modifier"]), Tooltip="Roll Sleight of Hand (DEX) Check")
        self.SleightOfHandModifierRollButton.setSizePolicy(self.InputsSizePolicy)

        # Stealth (DEX)
        self.StealthLabel = QLabel("Stealth (DEX)")
        self.StealthLabel.setAlignment(QtCore.Qt.AlignCenter)
        self.StealthModifierLineEdit = QLineEdit()
        self.StealthModifierLineEdit.setMinimumWidth(75)
        self.StealthModifierLineEdit.setSizePolicy(self.InputsSizePolicy)
        self.StealthModifierLineEdit.setAlignment(QtCore.Qt.AlignCenter)
        self.StealthModifierLineEdit.setReadOnly(True)
        self.StealthModifierRollButton = RollButton(lambda: self.Roll("Stealth (DEX) Check:\n", self.CharacterWindow.PlayerCharacter.Stats["Skills"]["Stealth Stat Modifier"]), Tooltip="Roll Stealth (DEX) Check")
        self.StealthModifierRollButton.setSizePolicy(self.InputsSizePolicy)

        # Survival (WIS)
        self.SurvivalLabel = QLabel("Survival (WIS)")
        self.SurvivalLabel.setAlignment(QtCore.Qt.AlignCenter)
        self.SurvivalModifierLineEdit = QLineEdit()
        self.SurvivalModifierLineEdit.setMinimumWidth(75)
        self.SurvivalModifierLineEdit.setSizePolicy(self.InputsSizePolicy)
        self.SurvivalModifierLineEdit.setAlignment(QtCore.Qt.AlignCenter)
        self.SurvivalModifierLineEdit.setReadOnly(True)
        self.SurvivalModifierRollButton = RollButton(lambda: self.Roll("Survival (WIS) Check:\n", self.CharacterWindow.PlayerCharacter.Stats["Skills"]["Survival Stat Modifier"]), Tooltip="Roll Survival (WIS) Check")
        self.SurvivalModifierRollButton.setSizePolicy(self.InputsSizePolicy)

        # Passive Scores Header
        self.PassiveScoresLabel = QLabel("Passive Scores")
        self.PassiveScoresLabel.setStyleSheet(self.SectionLabelStyle)
        self.PassiveScoresLabel.setAlignment(QtCore.Qt.AlignCenter)
        self.PassiveScoresLabel.setMargin(self.HeaderLabelMargin)

        self.PassiveSkillsHeaderSkillLabel = QLabel("Skill")
        self.PassiveSkillsHeaderSkillLabel.setAlignment(QtCore.Qt.AlignCenter)
        self.PassiveSkillsHeaderSkillLabel.setFrameStyle(QLabel.Panel | QLabel.Plain)
        self.PassiveSkillsHeaderSkillLabel.setMargin(5)
        self.PassiveSkillsHeaderScoreLabel = QLabel("Score")
        self.PassiveSkillsHeaderScoreLabel.setAlignment(QtCore.Qt.AlignCenter)
        self.PassiveSkillsHeaderScoreLabel.setFrameStyle(QLabel.Panel | QLabel.Plain)
        self.PassiveSkillsHeaderScoreLabel.setMargin(5)

        # Passive Perception
        self.PassivePerceptionLabel = QLabel("Perception")
        self.PassivePerceptionLabel.setAlignment(QtCore.Qt.AlignCenter)
        self.PassivePerceptionLineEdit = QLineEdit()
        self.PassivePerceptionLineEdit.setMinimumWidth(75)
        self.PassivePerceptionLineEdit.setSizePolicy(self.InputsSizePolicy)
        self.PassivePerceptionLineEdit.setAlignment(QtCore.Qt.AlignCenter)
        self.PassivePerceptionLineEdit.setReadOnly(True)

        # Passive Investigation
        self.PassiveInvestigationLabel = QLabel("Investigation")
        self.PassiveInvestigationLabel.setAlignment(QtCore.Qt.AlignCenter)
        self.PassiveInvestigationLineEdit = QLineEdit()
        self.PassiveInvestigationLineEdit.setMinimumWidth(75)
        self.PassiveInvestigationLineEdit.setSizePolicy(self.InputsSizePolicy)
        self.PassiveInvestigationLineEdit.setAlignment(QtCore.Qt.AlignCenter)
        self.PassiveInvestigationLineEdit.setReadOnly(True)

    def CreateProficiencyInputs(self):
        # Header
        self.ProficienciesLabel = QLabel("Proficiencies")
        self.ProficienciesLabel.setStyleSheet(self.SectionLabelStyle)
        self.ProficienciesLabel.setAlignment(QtCore.Qt.AlignCenter)
        self.ProficienciesLabel.setMargin(self.HeaderLabelMargin)

        # Weapons Proficiencies
        self.WeaponsProficienciesLabel = QLabel("Weapons")
        self.WeaponsProficienciesLabel.setAlignment(QtCore.Qt.AlignCenter)
        self.WeaponsProficienciesLabel.setFrameStyle(QLabel.Panel | QLabel.Plain)
        self.WeaponsProficienciesLabel.setMargin(5)
        self.WeaponsProficiencesTextEdit = QTextEdit()
        self.WeaponsProficiencesTextEdit.setTabChangesFocus(True)
        self.WeaponsProficiencesTextEdit.textChanged.connect(lambda: self.CharacterWindow.UpdateStat("Weapons Proficiencies", self.WeaponsProficiencesTextEdit.toPlainText()))

        # Armor Proficiencies
        self.ArmorProficienciesLabel = QLabel("Armor")
        self.ArmorProficienciesLabel.setAlignment(QtCore.Qt.AlignCenter)
        self.ArmorProficienciesLabel.setFrameStyle(QLabel.Panel | QLabel.Plain)
        self.ArmorProficienciesLabel.setMargin(5)
        self.ArmorProficiencesTextEdit = QTextEdit()
        self.ArmorProficiencesTextEdit.setTabChangesFocus(True)
        self.ArmorProficiencesTextEdit.textChanged.connect(lambda: self.CharacterWindow.UpdateStat("Armor Proficiencies", self.ArmorProficiencesTextEdit.toPlainText()))

        # Tools and Instruments Proficiencies
        self.ToolsAndInstrumentsProficienciesLabel = QLabel("Tools and Instruments")
        self.ToolsAndInstrumentsProficienciesLabel.setAlignment(QtCore.Qt.AlignCenter)
        self.ToolsAndInstrumentsProficienciesLabel.setFrameStyle(QLabel.Panel | QLabel.Plain)
        self.ToolsAndInstrumentsProficienciesLabel.setMargin(5)
        self.ToolsAndInstrumentsProficiencesTextEdit = QTextEdit()
        self.ToolsAndInstrumentsProficiencesTextEdit.setTabChangesFocus(True)
        self.ToolsAndInstrumentsProficiencesTextEdit.textChanged.connect(lambda: self.CharacterWindow.UpdateStat("Tools and Instruments Proficiencies", self.ToolsAndInstrumentsProficiencesTextEdit.toPlainText()))

        # Languages Proficiencies
        self.LanguagesProficienciesLabel = QLabel("Languages")
        self.LanguagesProficienciesLabel.setAlignment(QtCore.Qt.AlignCenter)
        self.LanguagesProficienciesLabel.setFrameStyle(QLabel.Panel | QLabel.Plain)
        self.LanguagesProficienciesLabel.setMargin(5)
        self.LanguagesProficiencesTextEdit = QTextEdit()
        self.LanguagesProficiencesTextEdit.setTabChangesFocus(True)
        self.LanguagesProficiencesTextEdit.textChanged.connect(lambda: self.CharacterWindow.UpdateStat("Languages Proficiencies", self.LanguagesProficiencesTextEdit.toPlainText()))

        # Other Proficiencies
        self.OtherProficienciesLabel = QLabel("Other")
        self.OtherProficienciesLabel.setAlignment(QtCore.Qt.AlignCenter)
        self.OtherProficienciesLabel.setFrameStyle(QLabel.Panel | QLabel.Plain)
        self.OtherProficienciesLabel.setMargin(5)
        self.OtherProficiencesTextEdit = QTextEdit()
        self.OtherProficiencesTextEdit.setTabChangesFocus(True)
        self.OtherProficiencesTextEdit.textChanged.connect(lambda: self.CharacterWindow.UpdateStat("Other Proficiencies", self.OtherProficiencesTextEdit.toPlainText()))

    def CreateAndSetLayout(self):
        # Create Layout
        self.Layout = QGridLayout()

        # Abilities and Saving Throws Table
        self.AbilitiesAndSavingThrowsLayout = QGridLayout()
        self.AbilitiesAndSavingThrowsLayout.addWidget(self.AbilitiesAndSavingThrowsLabel, 0, 0, 1, 6)
        self.AbilitiesAndSavingThrowsLayout.addWidget(self.AbilitiesAndSavingThrowsEditButton, 0, 5)
        self.AbilitiesAndSavingThrowsLayout.addWidget(self.AbilitiesAndSavingThrowsHeaderAbilityLabel, 1, 0)
        self.AbilitiesAndSavingThrowsLayout.addWidget(self.AbilitiesAndSavingThrowsHeaderTotalLabel, 1, 1)
        self.AbilitiesAndSavingThrowsLayout.addWidget(self.AbilitiesAndSavingThrowsHeaderModifierLabel, 1, 2, 1, 2)
        self.AbilitiesAndSavingThrowsLayout.addWidget(self.AbilitiesAndSavingThrowsHeaderSavingThrowLabel, 1, 4, 1, 2)
        self.AbilitiesAndSavingThrowsLayout.addWidget(self.StrengthLabel, 2, 0)
        self.AbilitiesAndSavingThrowsLayout.addWidget(self.StrengthTotalLineEdit, 2, 1)
        self.AbilitiesAndSavingThrowsLayout.addWidget(self.StrengthModifierLineEdit, 2, 2)
        self.AbilitiesAndSavingThrowsLayout.addWidget(self.StrengthModifierRollButton, 2, 3)
        self.AbilitiesAndSavingThrowsLayout.addWidget(self.StrengthSavingThrowLineEdit, 2, 4)
        self.AbilitiesAndSavingThrowsLayout.addWidget(self.StrengthSavingThrowRollButton, 2, 5)
        self.AbilitiesAndSavingThrowsLayout.addWidget(self.DexterityLabel, 3, 0)
        self.AbilitiesAndSavingThrowsLayout.addWidget(self.DexterityTotalLineEdit, 3, 1)
        self.AbilitiesAndSavingThrowsLayout.addWidget(self.DexterityModifierLineEdit, 3, 2)
        self.AbilitiesAndSavingThrowsLayout.addWidget(self.DexterityModifierRollButton, 3, 3)
        self.AbilitiesAndSavingThrowsLayout.addWidget(self.DexteritySavingThrowLineEdit, 3, 4)
        self.AbilitiesAndSavingThrowsLayout.addWidget(self.DexteritySavingThrowRollButton, 3, 5)
        self.AbilitiesAndSavingThrowsLayout.addWidget(self.ConstitutionLabel, 4, 0)
        self.AbilitiesAndSavingThrowsLayout.addWidget(self.ConstitutionTotalLineEdit, 4, 1)
        self.AbilitiesAndSavingThrowsLayout.addWidget(self.ConstitutionModifierLineEdit, 4, 2)
        self.AbilitiesAndSavingThrowsLayout.addWidget(self.ConstitutionModifierRollButton, 4, 3)
        self.AbilitiesAndSavingThrowsLayout.addWidget(self.ConstitutionSavingThrowLineEdit, 4, 4)
        self.AbilitiesAndSavingThrowsLayout.addWidget(self.ConstitutionSavingThrowRollButton, 4, 5)
        self.AbilitiesAndSavingThrowsLayout.addWidget(self.IntelligenceLabel, 5, 0)
        self.AbilitiesAndSavingThrowsLayout.addWidget(self.IntelligenceTotalLineEdit, 5, 1)
        self.AbilitiesAndSavingThrowsLayout.addWidget(self.IntelligenceModifierLineEdit, 5, 2)
        self.AbilitiesAndSavingThrowsLayout.addWidget(self.IntelligenceModifierRollButton, 5, 3)
        self.AbilitiesAndSavingThrowsLayout.addWidget(self.IntelligenceSavingThrowLineEdit, 5, 4)
        self.AbilitiesAndSavingThrowsLayout.addWidget(self.IntelligenceSavingThrowRollButton, 5, 5)
        self.AbilitiesAndSavingThrowsLayout.addWidget(self.WisdomLabel, 6, 0)
        self.AbilitiesAndSavingThrowsLayout.addWidget(self.WisdomTotalLineEdit, 6, 1)
        self.AbilitiesAndSavingThrowsLayout.addWidget(self.WisdomModifierLineEdit, 6, 2)
        self.AbilitiesAndSavingThrowsLayout.addWidget(self.WisdomModifierRollButton, 6, 3)
        self.AbilitiesAndSavingThrowsLayout.addWidget(self.WisdomSavingThrowLineEdit, 6, 4)
        self.AbilitiesAndSavingThrowsLayout.addWidget(self.WisdomSavingThrowRollButton, 6, 5)
        self.AbilitiesAndSavingThrowsLayout.addWidget(self.CharismaLabel, 7, 0)
        self.AbilitiesAndSavingThrowsLayout.addWidget(self.CharismaTotalLineEdit, 7, 1)
        self.AbilitiesAndSavingThrowsLayout.addWidget(self.CharismaModifierLineEdit, 7, 2)
        self.AbilitiesAndSavingThrowsLayout.addWidget(self.CharismaModifierRollButton, 7, 3)
        self.AbilitiesAndSavingThrowsLayout.addWidget(self.CharismaSavingThrowLineEdit, 7, 4)
        self.AbilitiesAndSavingThrowsLayout.addWidget(self.CharismaSavingThrowRollButton, 7, 5)
        for Row in range(2, 8):
            self.AbilitiesAndSavingThrowsLayout.setRowStretch(Row, 1)
        for Column in [1, 2, 4]:
            self.AbilitiesAndSavingThrowsLayout.setColumnStretch(Column, 1)
        self.Layout.addLayout(self.AbilitiesAndSavingThrowsLayout, 0, 0, 2, 1)

        # Skills Table
        self.SkillsLayout = QGridLayout()
        self.SkillsLayout.addWidget(self.SkillsLabel, 0, 0, 1, 3)
        self.SkillsLayout.addWidget(self.SkillsEditButton, 0, 2)
        self.SkillsLayout.addWidget(self.SkillsHeaderSkillLabel, 1, 0)
        self.SkillsLayout.addWidget(self.SkillsHeaderModifierLabel, 1, 1, 1, 2)
        self.SkillsLayout.addWidget(self.AcrobaticsLabel, 2, 0)
        self.SkillsLayout.addWidget(self.AcrobaticsModifierLineEdit, 2, 1)
        self.SkillsLayout.addWidget(self.AcrobaticsModifierRollButton, 2, 2)
        self.SkillsLayout.addWidget(self.AnimalHandlingLabel, 3, 0)
        self.SkillsLayout.addWidget(self.AnimalHandlingModifierLineEdit, 3, 1)
        self.SkillsLayout.addWidget(self.AnimalHandlingModifierRollButton, 3, 2)
        self.SkillsLayout.addWidget(self.ArcanaLabel, 4, 0)
        self.SkillsLayout.addWidget(self.ArcanaModifierLineEdit, 4, 1)
        self.SkillsLayout.addWidget(self.ArcanaModifierRollButton, 4, 2)
        self.SkillsLayout.addWidget(self.AthleticsLabel, 5, 0)
        self.SkillsLayout.addWidget(self.AthleticsModifierLineEdit, 5, 1)
        self.SkillsLayout.addWidget(self.AthleticsModifierRollButton, 5, 2)
        self.SkillsLayout.addWidget(self.DeceptionLabel, 6, 0)
        self.SkillsLayout.addWidget(self.DeceptionModifierLineEdit, 6, 1)
        self.SkillsLayout.addWidget(self.DeceptionModifierRollButton, 6, 2)
        self.SkillsLayout.addWidget(self.HistoryLabel, 7, 0)
        self.SkillsLayout.addWidget(self.HistoryModifierLineEdit, 7, 1)
        self.SkillsLayout.addWidget(self.HistoryModifierRollButton, 7, 2)
        self.SkillsLayout.addWidget(self.InsightLabel, 8, 0)
        self.SkillsLayout.addWidget(self.InsightModifierLineEdit, 8, 1)
        self.SkillsLayout.addWidget(self.InsightModifierRollButton, 8, 2)
        self.SkillsLayout.addWidget(self.IntimidationLabel, 9, 0)
        self.SkillsLayout.addWidget(self.IntimidationModifierLineEdit, 9, 1)
        self.SkillsLayout.addWidget(self.IntimidationModifierRollButton, 9, 2)
        self.SkillsLayout.addWidget(self.InvestigationLabel, 10, 0)
        self.SkillsLayout.addWidget(self.InvestigationModifierLineEdit, 10, 1)
        self.SkillsLayout.addWidget(self.InvestigationModifierRollButton, 10, 2)
        self.SkillsLayout.addWidget(self.MedicineLabel, 11, 0)
        self.SkillsLayout.addWidget(self.MedicineModifierLineEdit, 11, 1)
        self.SkillsLayout.addWidget(self.MedicineModifierRollButton, 11, 2)
        self.SkillsLayout.addWidget(self.NatureLabel, 12, 0)
        self.SkillsLayout.addWidget(self.NatureModifierLineEdit, 12, 1)
        self.SkillsLayout.addWidget(self.NatureModifierRollButton, 12, 2)
        self.SkillsLayout.addWidget(self.PerceptionLabel, 13, 0)
        self.SkillsLayout.addWidget(self.PerceptionModifierLineEdit, 13, 1)
        self.SkillsLayout.addWidget(self.PerceptionModifierRollButton, 13, 2)
        self.SkillsLayout.addWidget(self.PerformanceLabel, 14, 0)
        self.SkillsLayout.addWidget(self.PerformanceModifierLineEdit, 14, 1)
        self.SkillsLayout.addWidget(self.PerformanceModifierRollButton, 14, 2)
        self.SkillsLayout.addWidget(self.PersuasionLabel, 15, 0)
        self.SkillsLayout.addWidget(self.PersuasionModifierLineEdit, 15, 1)
        self.SkillsLayout.addWidget(self.PersuasionModifierRollButton, 15, 2)
        self.SkillsLayout.addWidget(self.ReligionLabel, 16, 0)
        self.SkillsLayout.addWidget(self.ReligionModifierLineEdit, 16, 1)
        self.SkillsLayout.addWidget(self.ReligionModifierRollButton, 16, 2)
        self.SkillsLayout.addWidget(self.SleightOfHandLabel, 17, 0)
        self.SkillsLayout.addWidget(self.SleightOfHandModifierLineEdit, 17, 1)
        self.SkillsLayout.addWidget(self.SleightOfHandModifierRollButton, 17, 2)
        self.SkillsLayout.addWidget(self.StealthLabel, 18, 0)
        self.SkillsLayout.addWidget(self.StealthModifierLineEdit, 18, 1)
        self.SkillsLayout.addWidget(self.StealthModifierRollButton, 18, 2)
        self.SkillsLayout.addWidget(self.SurvivalLabel, 19, 0)
        self.SkillsLayout.addWidget(self.SurvivalModifierLineEdit, 19, 1)
        self.SkillsLayout.addWidget(self.SurvivalModifierRollButton, 19, 2)
        for Row in range(2, 20):
            self.SkillsLayout.setRowStretch(Row, 1)
        self.SkillsLayout.setColumnStretch(1, 1)
        self.Layout.addLayout(self.SkillsLayout, 0, 1)

        # Passive Scores Table
        self.PassiveScoresLayout = QGridLayout()
        self.PassiveScoresLayout.addWidget(self.PassiveScoresLabel, 0, 0, 1, 2)
        self.PassiveScoresLayout.addWidget(self.PassiveSkillsHeaderSkillLabel, 1, 0)
        self.PassiveScoresLayout.addWidget(self.PassiveSkillsHeaderScoreLabel, 1, 1)
        self.PassiveScoresLayout.addWidget(self.PassivePerceptionLabel, 2, 0)
        self.PassiveScoresLayout.addWidget(self.PassivePerceptionLineEdit, 2, 1)
        self.PassiveScoresLayout.addWidget(self.PassiveInvestigationLabel, 3, 0)
        self.PassiveScoresLayout.addWidget(self.PassiveInvestigationLineEdit, 3, 1)
        for Row in [2, 3]:
            self.PassiveScoresLayout.setRowStretch(Row, 1)
        self.PassiveScoresLayout.setColumnStretch(1, 1)
        self.Layout.addLayout(self.PassiveScoresLayout, 1, 1)

        # Proficiencies
        self.ProficienciesLayout = QGridLayout()
        self.ProficienciesLayout.addWidget(self.ProficienciesLabel, 0, 0)
        self.ProficienciesLayout.addWidget(self.WeaponsProficienciesLabel, 1, 0)
        self.ProficienciesLayout.addWidget(self.WeaponsProficiencesTextEdit, 2, 0)
        self.ProficienciesLayout.addWidget(self.ArmorProficienciesLabel, 3, 0)
        self.ProficienciesLayout.addWidget(self.ArmorProficiencesTextEdit, 4, 0)
        self.ProficienciesLayout.addWidget(self.ToolsAndInstrumentsProficienciesLabel, 5, 0)
        self.ProficienciesLayout.addWidget(self.ToolsAndInstrumentsProficiencesTextEdit, 6, 0)
        self.ProficienciesLayout.addWidget(self.LanguagesProficienciesLabel, 7, 0)
        self.ProficienciesLayout.addWidget(self.LanguagesProficiencesTextEdit, 8, 0)
        self.ProficienciesLayout.addWidget(self.OtherProficienciesLabel, 9, 0)
        self.ProficienciesLayout.addWidget(self.OtherProficiencesTextEdit, 10, 0)
        for Row in [2, 4, 6, 8, 10]:
            self.ProficienciesLayout.setRowStretch(Row, 1)
        self.Layout.addLayout(self.ProficienciesLayout, 0, 2, 2, 1)

        # Ability Scores Table Stretching
        self.Layout.setColumnStretch(0, 1)

        # Set Layout
        self.setLayout(self.Layout)

    def EditAbilityScores(self):
        pass

    def EditSkills(self):
        pass

    def Roll(self, Prefix, StatModifier):
        self.CharacterWindow.PlayerCharacter.Stats["Dice Roller"].RollDice(1, 20, StatModifier, LogPrefix=Prefix)
        self.CharacterWindow.UpdateUnsavedChangesFlag(True)
