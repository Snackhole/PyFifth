from PyQt5 import QtCore
from PyQt5.QtWidgets import QFrame, QGridLayout, QLabel, QLineEdit, QSizePolicy

from Interface.Widgets.EditButton import EditButton
from Interface.Widgets.RollButton import RollButton


class PlayerCharacterAbilitiesAndSkillsWidget(QFrame):
    def __init__(self, CharacterWindow):
        # Initialize Frame
        super().__init__()

        # Store Parameters
        self.CharacterWindow = CharacterWindow

        # Styles
        self.SectionLabelStyle = "QLabel {font-size: 10pt;}"

        # Inputs Size Policy
        self.InputsSizePolicy = QSizePolicy(QSizePolicy.Minimum, QSizePolicy.Minimum)

        # Abilities and Saving Throws
        self.CreateAbilitiesAndSavingThrowsTable()

        # Create and Set Layout
        self.CreateAndSetLayout()

    def CreateAbilitiesAndSavingThrowsTable(self):
        self.AbilitiesAndSavingThrowsLabel = QLabel("Abilities and Saving Throws")
        self.AbilitiesAndSavingThrowsLabel.setStyleSheet(self.SectionLabelStyle)
        self.AbilitiesAndSavingThrowsLabel.setAlignment(QtCore.Qt.AlignCenter)

        self.AbilitiesAndSavingThrowsEditButton = EditButton(lambda: self.EditAbilityScores())
        self.AbilitiesAndSavingThrowsEditButton.setSizePolicy(self.InputsSizePolicy)

        self.AbilitiesAndSavingThrowsHeaderAbilityLabel = QLabel("Ability")
        self.AbilitiesAndSavingThrowsHeaderAbilityLabel.setAlignment(QtCore.Qt.AlignCenter)
        self.AbilitiesAndSavingThrowsHeaderAbilityLabel.setFrameStyle(QLabel.Panel | QLabel.Plain)
        self.AbilitiesAndSavingThrowsHeaderAbilityLabel.setMargin(5)
        self.AbilitiesAndSavingThrowsHeaderTotalLabel = QLabel("Total")
        self.AbilitiesAndSavingThrowsHeaderTotalLabel.setAlignment(QtCore.Qt.AlignCenter)
        self.AbilitiesAndSavingThrowsHeaderTotalLabel.setFrameStyle(QLabel.Panel | QLabel.Plain)
        self.AbilitiesAndSavingThrowsHeaderTotalLabel.setMargin(5)
        self.AbilitiesAndSavingThrowsHeaderModifierLabel = QLabel("Modifier")
        self.AbilitiesAndSavingThrowsHeaderModifierLabel.setAlignment(QtCore.Qt.AlignCenter)
        self.AbilitiesAndSavingThrowsHeaderModifierLabel.setFrameStyle(QLabel.Panel | QLabel.Plain)
        self.AbilitiesAndSavingThrowsHeaderModifierLabel.setMargin(5)
        self.AbilitiesAndSavingThrowsHeaderSavingThrowLabel = QLabel("Saving Throw")
        self.AbilitiesAndSavingThrowsHeaderSavingThrowLabel.setAlignment(QtCore.Qt.AlignCenter)
        self.AbilitiesAndSavingThrowsHeaderSavingThrowLabel.setFrameStyle(QLabel.Panel | QLabel.Plain)
        self.AbilitiesAndSavingThrowsHeaderSavingThrowLabel.setMargin(5)

        self.StrengthLabel = QLabel("Strength")
        self.StrengthLabel.setAlignment(QtCore.Qt.AlignCenter)
        self.StrengthTotalLineEdit = QLineEdit()
        self.StrengthTotalLineEdit.setSizePolicy(self.InputsSizePolicy)
        self.StrengthTotalLineEdit.setAlignment(QtCore.Qt.AlignCenter)
        self.StrengthTotalLineEdit.setEnabled(False)
        self.StrengthModifierLineEdit = QLineEdit()
        self.StrengthModifierLineEdit.setSizePolicy(self.InputsSizePolicy)
        self.StrengthModifierLineEdit.setAlignment(QtCore.Qt.AlignCenter)
        self.StrengthModifierLineEdit.setEnabled(False)
        self.StrengthModifierRollButton = RollButton(lambda: self.Roll("Strength Ability Check:\n", self.CharacterWindow.PlayerCharacter.Stats["Ability Scores"]["Strength Stat Modifier"]))
        self.StrengthModifierRollButton.setSizePolicy(self.InputsSizePolicy)
        self.StrengthSavingThrowLineEdit = QLineEdit()
        self.StrengthSavingThrowLineEdit.setSizePolicy(self.InputsSizePolicy)
        self.StrengthSavingThrowLineEdit.setAlignment(QtCore.Qt.AlignCenter)
        self.StrengthSavingThrowLineEdit.setEnabled(False)
        self.StrengthSavingThrowRollButton = RollButton(lambda: self.Roll("Strength Saving Throw:\n", self.CharacterWindow.PlayerCharacter.Stats["Ability Scores"]["Strength Save Stat Modifier"]))
        self.StrengthSavingThrowRollButton.setSizePolicy(self.InputsSizePolicy)

        self.DexterityLabel = QLabel("Dexterity")
        self.DexterityLabel.setAlignment(QtCore.Qt.AlignCenter)
        self.DexterityTotalLineEdit = QLineEdit()
        self.DexterityTotalLineEdit.setSizePolicy(self.InputsSizePolicy)
        self.DexterityTotalLineEdit.setAlignment(QtCore.Qt.AlignCenter)
        self.DexterityTotalLineEdit.setEnabled(False)
        self.DexterityModifierLineEdit = QLineEdit()
        self.DexterityModifierLineEdit.setSizePolicy(self.InputsSizePolicy)
        self.DexterityModifierLineEdit.setAlignment(QtCore.Qt.AlignCenter)
        self.DexterityModifierLineEdit.setEnabled(False)
        self.DexterityModifierRollButton = RollButton(lambda: self.Roll("Dexterity Ability Check:\n", self.CharacterWindow.PlayerCharacter.Stats["Ability Scores"]["Dexterity Stat Modifier"]))
        self.DexterityModifierRollButton.setSizePolicy(self.InputsSizePolicy)
        self.DexteritySavingThrowLineEdit = QLineEdit()
        self.DexteritySavingThrowLineEdit.setSizePolicy(self.InputsSizePolicy)
        self.DexteritySavingThrowLineEdit.setAlignment(QtCore.Qt.AlignCenter)
        self.DexteritySavingThrowLineEdit.setEnabled(False)
        self.DexteritySavingThrowRollButton = RollButton(lambda: self.Roll("Dexterity Saving Throw:\n", self.CharacterWindow.PlayerCharacter.Stats["Ability Scores"]["Dexterity Save Stat Modifier"]))
        self.DexteritySavingThrowRollButton.setSizePolicy(self.InputsSizePolicy)

        self.ConstitutionLabel = QLabel("Constitution")
        self.ConstitutionLabel.setAlignment(QtCore.Qt.AlignCenter)
        self.ConstitutionTotalLineEdit = QLineEdit()
        self.ConstitutionTotalLineEdit.setSizePolicy(self.InputsSizePolicy)
        self.ConstitutionTotalLineEdit.setAlignment(QtCore.Qt.AlignCenter)
        self.ConstitutionTotalLineEdit.setEnabled(False)
        self.ConstitutionModifierLineEdit = QLineEdit()
        self.ConstitutionModifierLineEdit.setSizePolicy(self.InputsSizePolicy)
        self.ConstitutionModifierLineEdit.setAlignment(QtCore.Qt.AlignCenter)
        self.ConstitutionModifierLineEdit.setEnabled(False)
        self.ConstitutionModifierRollButton = RollButton(lambda: self.Roll("Constitution Ability Check:\n", self.CharacterWindow.PlayerCharacter.Stats["Ability Scores"]["Constitution Stat Modifier"]))
        self.ConstitutionModifierRollButton.setSizePolicy(self.InputsSizePolicy)
        self.ConstitutionSavingThrowLineEdit = QLineEdit()
        self.ConstitutionSavingThrowLineEdit.setSizePolicy(self.InputsSizePolicy)
        self.ConstitutionSavingThrowLineEdit.setAlignment(QtCore.Qt.AlignCenter)
        self.ConstitutionSavingThrowLineEdit.setEnabled(False)
        self.ConstitutionSavingThrowRollButton = RollButton(lambda: self.Roll("Constitution Saving Throw:\n", self.CharacterWindow.PlayerCharacter.Stats["Ability Scores"]["Constitution Save Stat Modifier"]))
        self.ConstitutionSavingThrowRollButton.setSizePolicy(self.InputsSizePolicy)

        self.IntelligenceLabel = QLabel("Intelligence")
        self.IntelligenceLabel.setAlignment(QtCore.Qt.AlignCenter)
        self.IntelligenceTotalLineEdit = QLineEdit()
        self.IntelligenceTotalLineEdit.setSizePolicy(self.InputsSizePolicy)
        self.IntelligenceTotalLineEdit.setAlignment(QtCore.Qt.AlignCenter)
        self.IntelligenceTotalLineEdit.setEnabled(False)
        self.IntelligenceModifierLineEdit = QLineEdit()
        self.IntelligenceModifierLineEdit.setSizePolicy(self.InputsSizePolicy)
        self.IntelligenceModifierLineEdit.setAlignment(QtCore.Qt.AlignCenter)
        self.IntelligenceModifierLineEdit.setEnabled(False)
        self.IntelligenceModifierRollButton = RollButton(lambda: self.Roll("Intelligence Ability Check:\n", self.CharacterWindow.PlayerCharacter.Stats["Ability Scores"]["Intelligence Stat Modifier"]))
        self.IntelligenceModifierRollButton.setSizePolicy(self.InputsSizePolicy)
        self.IntelligenceSavingThrowLineEdit = QLineEdit()
        self.IntelligenceSavingThrowLineEdit.setSizePolicy(self.InputsSizePolicy)
        self.IntelligenceSavingThrowLineEdit.setAlignment(QtCore.Qt.AlignCenter)
        self.IntelligenceSavingThrowLineEdit.setEnabled(False)
        self.IntelligenceSavingThrowRollButton = RollButton(lambda: self.Roll("Intelligence Saving Throw:\n", self.CharacterWindow.PlayerCharacter.Stats["Ability Scores"]["Intelligence Save Stat Modifier"]))
        self.IntelligenceSavingThrowRollButton.setSizePolicy(self.InputsSizePolicy)

        self.WisdomLabel = QLabel("Wisdom")
        self.WisdomLabel.setAlignment(QtCore.Qt.AlignCenter)
        self.WisdomTotalLineEdit = QLineEdit()
        self.WisdomTotalLineEdit.setSizePolicy(self.InputsSizePolicy)
        self.WisdomTotalLineEdit.setAlignment(QtCore.Qt.AlignCenter)
        self.WisdomTotalLineEdit.setEnabled(False)
        self.WisdomModifierLineEdit = QLineEdit()
        self.WisdomModifierLineEdit.setSizePolicy(self.InputsSizePolicy)
        self.WisdomModifierLineEdit.setAlignment(QtCore.Qt.AlignCenter)
        self.WisdomModifierLineEdit.setEnabled(False)
        self.WisdomModifierRollButton = RollButton(lambda: self.Roll("Wisdom Ability Check:\n", self.CharacterWindow.PlayerCharacter.Stats["Ability Scores"]["Wisdom Stat Modifier"]))
        self.WisdomModifierRollButton.setSizePolicy(self.InputsSizePolicy)
        self.WisdomSavingThrowLineEdit = QLineEdit()
        self.WisdomSavingThrowLineEdit.setSizePolicy(self.InputsSizePolicy)
        self.WisdomSavingThrowLineEdit.setAlignment(QtCore.Qt.AlignCenter)
        self.WisdomSavingThrowLineEdit.setEnabled(False)
        self.WisdomSavingThrowRollButton = RollButton(lambda: self.Roll("Wisdom Saving Throw:\n", self.CharacterWindow.PlayerCharacter.Stats["Ability Scores"]["Wisdom Save Stat Modifier"]))
        self.WisdomSavingThrowRollButton.setSizePolicy(self.InputsSizePolicy)

        self.CharismaLabel = QLabel("Charisma")
        self.CharismaLabel.setAlignment(QtCore.Qt.AlignCenter)
        self.CharismaTotalLineEdit = QLineEdit()
        self.CharismaTotalLineEdit.setSizePolicy(self.InputsSizePolicy)
        self.CharismaTotalLineEdit.setAlignment(QtCore.Qt.AlignCenter)
        self.CharismaTotalLineEdit.setEnabled(False)
        self.CharismaModifierLineEdit = QLineEdit()
        self.CharismaModifierLineEdit.setSizePolicy(self.InputsSizePolicy)
        self.CharismaModifierLineEdit.setAlignment(QtCore.Qt.AlignCenter)
        self.CharismaModifierLineEdit.setEnabled(False)
        self.CharismaModifierRollButton = RollButton(lambda: self.Roll("Charisma Ability Check:\n", self.CharacterWindow.PlayerCharacter.Stats["Ability Scores"]["Charisma Stat Modifier"]))
        self.CharismaModifierRollButton.setSizePolicy(self.InputsSizePolicy)
        self.CharismaSavingThrowLineEdit = QLineEdit()
        self.CharismaSavingThrowLineEdit.setSizePolicy(self.InputsSizePolicy)
        self.CharismaSavingThrowLineEdit.setAlignment(QtCore.Qt.AlignCenter)
        self.CharismaSavingThrowLineEdit.setEnabled(False)
        self.CharismaSavingThrowRollButton = RollButton(lambda: self.Roll("Charisma Saving Throw:\n", self.CharacterWindow.PlayerCharacter.Stats["Ability Scores"]["Charisma Save Stat Modifier"]))
        self.CharismaSavingThrowRollButton.setSizePolicy(self.InputsSizePolicy)

    def CreateAndSetLayout(self):
        # Create Layout
        self.Layout = QGridLayout()

        # Abilities and Saving Throws Table
        self.AbilitiesAndSavingThrowsLayout = QGridLayout()
        self.AbilitiesAndSavingThrowsLayout.addWidget(self.AbilitiesAndSavingThrowsLabel, 0, 0, 1, 6)
        self.AbilitiesAndSavingThrowsLayout.addWidget(self.AbilitiesAndSavingThrowsEditButton, 0, 5)
        self.AbilitiesAndSavingThrowsLayout.addWidget(self.AbilitiesAndSavingThrowsHeaderAbilityLabel, 1, 0)
        self.AbilitiesAndSavingThrowsLayout.addWidget(self.AbilitiesAndSavingThrowsHeaderTotalLabel, 1, 1)
        self.AbilitiesAndSavingThrowsLayout.addWidget(self.AbilitiesAndSavingThrowsHeaderModifierLabel, 1, 2, 1, 2)
        self.AbilitiesAndSavingThrowsLayout.addWidget(self.AbilitiesAndSavingThrowsHeaderSavingThrowLabel, 1, 4, 1, 2)
        self.AbilitiesAndSavingThrowsLayout.addWidget(self.StrengthLabel, 2, 0)
        self.AbilitiesAndSavingThrowsLayout.addWidget(self.StrengthTotalLineEdit, 2, 1)
        self.AbilitiesAndSavingThrowsLayout.addWidget(self.StrengthModifierLineEdit, 2, 2)
        self.AbilitiesAndSavingThrowsLayout.addWidget(self.StrengthModifierRollButton, 2, 3)
        self.AbilitiesAndSavingThrowsLayout.addWidget(self.StrengthSavingThrowLineEdit, 2, 4)
        self.AbilitiesAndSavingThrowsLayout.addWidget(self.StrengthSavingThrowRollButton, 2, 5)
        self.AbilitiesAndSavingThrowsLayout.addWidget(self.DexterityLabel, 3, 0)
        self.AbilitiesAndSavingThrowsLayout.addWidget(self.DexterityTotalLineEdit, 3, 1)
        self.AbilitiesAndSavingThrowsLayout.addWidget(self.DexterityModifierLineEdit, 3, 2)
        self.AbilitiesAndSavingThrowsLayout.addWidget(self.DexterityModifierRollButton, 3, 3)
        self.AbilitiesAndSavingThrowsLayout.addWidget(self.DexteritySavingThrowLineEdit, 3, 4)
        self.AbilitiesAndSavingThrowsLayout.addWidget(self.DexteritySavingThrowRollButton, 3, 5)
        self.AbilitiesAndSavingThrowsLayout.addWidget(self.ConstitutionLabel, 4, 0)
        self.AbilitiesAndSavingThrowsLayout.addWidget(self.ConstitutionTotalLineEdit, 4, 1)
        self.AbilitiesAndSavingThrowsLayout.addWidget(self.ConstitutionModifierLineEdit, 4, 2)
        self.AbilitiesAndSavingThrowsLayout.addWidget(self.ConstitutionModifierRollButton, 4, 3)
        self.AbilitiesAndSavingThrowsLayout.addWidget(self.ConstitutionSavingThrowLineEdit, 4, 4)
        self.AbilitiesAndSavingThrowsLayout.addWidget(self.ConstitutionSavingThrowRollButton, 4, 5)
        self.AbilitiesAndSavingThrowsLayout.addWidget(self.IntelligenceLabel, 5, 0)
        self.AbilitiesAndSavingThrowsLayout.addWidget(self.IntelligenceTotalLineEdit, 5, 1)
        self.AbilitiesAndSavingThrowsLayout.addWidget(self.IntelligenceModifierLineEdit, 5, 2)
        self.AbilitiesAndSavingThrowsLayout.addWidget(self.IntelligenceModifierRollButton, 5, 3)
        self.AbilitiesAndSavingThrowsLayout.addWidget(self.IntelligenceSavingThrowLineEdit, 5, 4)
        self.AbilitiesAndSavingThrowsLayout.addWidget(self.IntelligenceSavingThrowRollButton, 5, 5)
        self.AbilitiesAndSavingThrowsLayout.addWidget(self.WisdomLabel, 6, 0)
        self.AbilitiesAndSavingThrowsLayout.addWidget(self.WisdomTotalLineEdit, 6, 1)
        self.AbilitiesAndSavingThrowsLayout.addWidget(self.WisdomModifierLineEdit, 6, 2)
        self.AbilitiesAndSavingThrowsLayout.addWidget(self.WisdomModifierRollButton, 6, 3)
        self.AbilitiesAndSavingThrowsLayout.addWidget(self.WisdomSavingThrowLineEdit, 6, 4)
        self.AbilitiesAndSavingThrowsLayout.addWidget(self.WisdomSavingThrowRollButton, 6, 5)
        self.AbilitiesAndSavingThrowsLayout.addWidget(self.CharismaLabel, 7, 0)
        self.AbilitiesAndSavingThrowsLayout.addWidget(self.CharismaTotalLineEdit, 7, 1)
        self.AbilitiesAndSavingThrowsLayout.addWidget(self.CharismaModifierLineEdit, 7, 2)
        self.AbilitiesAndSavingThrowsLayout.addWidget(self.CharismaModifierRollButton, 7, 3)
        self.AbilitiesAndSavingThrowsLayout.addWidget(self.CharismaSavingThrowLineEdit, 7, 4)
        self.AbilitiesAndSavingThrowsLayout.addWidget(self.CharismaSavingThrowRollButton, 7, 5)
        self.AbilitiesAndSavingThrowsLayout.setRowStretch(2, 1)
        self.AbilitiesAndSavingThrowsLayout.setRowStretch(3, 1)
        self.AbilitiesAndSavingThrowsLayout.setRowStretch(4, 1)
        self.AbilitiesAndSavingThrowsLayout.setRowStretch(5, 1)
        self.AbilitiesAndSavingThrowsLayout.setRowStretch(6, 1)
        self.AbilitiesAndSavingThrowsLayout.setRowStretch(7, 1)
        self.Layout.addLayout(self.AbilitiesAndSavingThrowsLayout, 0, 0)

        # Set Layout
        self.setLayout(self.Layout)

    def EditAbilityScores(self):
        pass

    def Roll(self, Prefix, StatModifier):
        self.CharacterWindow.PlayerCharacter.Stats["Dice Roller"].RollDice(1, 20, StatModifier, LogPrefix=Prefix)
        self.CharacterWindow.UpdateUnsavedChangesFlag(True)
